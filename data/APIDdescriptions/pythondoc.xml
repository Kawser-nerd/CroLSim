<?xml version='1.0' encoding='UTF-8'?>
<pythondoc><string.Formatter><format>The primary API method.  It takes a format string and an arbitrary set of positional and keyword arguments. It is just a wrapper that calls vformat(). </format><vformat>This function does the actual work of formatting.  It is exposed as a separate function for cases where you want to pass in a predefined dictionary of arguments, rather than unpacking and repacking the dictionary as individual arguments using the *args and **kwargs syntax.  vformat() does the work of breaking up the format string into character data and replacement fields.  It calls the various methods described below. </vformat><parse>Loop over the format_string and return an iterable of tuples (literal_text, field_name, format_spec, conversion).  This is used by vformat() to break the string into either literal text, or replacement fields. The values in the tuple conceptually represent a span of literal text followed by a single replacement field.  If there is no literal text (which can happen if two replacement fields occur consecutively), then literal_text will be a zero-length string.  If there is no replacement field, then the values of field_name, format_spec and conversion will be None. </parse><get_field>Given field_name as returned by parse() (see above), convert it to an object to be formatted.  Returns a tuple (obj, used_key).  The default version takes strings of the form defined in PEP 3101, such as "0[name]" or "label.title".  args and kwargs are as passed in to vformat().  The return value used_key has the same meaning as the key parameter to get_value(). </get_field><get_value>Retrieve a given field value.  The key argument will be either an integer or a string.  If it is an integer, it represents the index of the positional argument in args; if it is a string, then it represents a named argument in kwargs. The args parameter is set to the list of positional arguments to vformat(), and the kwargs parameter is set to the dictionary of keyword arguments. For compound field names, these functions are only called for the first component of the field name; Subsequent components are handled through normal attribute and indexing operations. So for example, the field expression '0.name' would cause get_value() to be called with a key argument of 0.  The name attribute will be looked up after get_value() returns by calling the built-in getattr() function. If the index or keyword refers to an item that does not exist, then an IndexError or KeyError should be raised. </get_value><check_unused_args>Implement checking for unused arguments if desired.  The arguments to this function is the set of all argument keys that were actually referred to in the format string (integers for positional arguments, and strings for named arguments), and a reference to the args and kwargs that was passed to vformat.  The set of unused args can be calculated from these parameters.  check_unused_args() is assumed to raise an exception if the check fails. </check_unused_args><format_field>format_field() simply calls the global format() built-in.  The method is provided so that subclasses can override it. </format_field><convert_field>Converts the value (returned by get_field()) given a conversion type (as in the tuple returned by the parse() method).  The default version understands 's' (str), 'r' (repr) and 'a' (ascii) conversion types. </convert_field></string.Formatter><string.Template><substitute>Performs the template substitution, returning a new string.  mapping is any dictionary-like object with keys that match the placeholders in the template.  Alternatively, you can provide keyword arguments, where the keywords are the placeholders.  When both mapping and kws are given and there are duplicates, the placeholders from kws take precedence. </substitute><safe_substitute>Like substitute(), except that if placeholders are missing from mapping and kws, instead of raising a KeyError exception, the original placeholder will appear in the resulting string intact.  Also, unlike with substitute(), any other appearances of the $ will simply return $ instead of raising ValueError. While other exceptions may still occur, this method is called "safe" because substitutions always tries to return a usable string instead of raising an exception.  In another sense, safe_substitute() may be anything other than safe, since it will silently ignore malformed templates containing dangling delimiters, unmatched braces, or placeholders that are not valid Python identifiers. </safe_substitute></string.Template><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill></string><string><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace><capwords>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words. </capwords><maketrans>Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  </maketrans><atof> Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  </atof><atoi> Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().) </atoi><atol> Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string. </atol><capitalize>Return a copy of word with only its first character capitalized. </capitalize><expandtabs>Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn't understand other non-printing characters or escape sequences.  The tab size defaults to 8. </expandtabs><find>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. </find><rfind>Like find() but find the highest index. </rfind><index>Like find() but raise ValueError when the substring is not found. </index><rindex>Like rfind() but raise ValueError when the substring is not found. </rindex><count>Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. </count><lower>Return a copy of s, but with upper case letters converted to lower case. </lower><split>Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string. </split><rsplit>Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  If maxsplit is given, at most maxsplit number of splits &amp;#8211; the rightmost ones &amp;#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.  </rsplit><splitfields>This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.) </splitfields><join>Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s. </join><joinfields>This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead. </joinfields><lstrip>Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </lstrip><rstrip>Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </rstrip><strip>Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.  </strip><swapcase>Return a copy of s, but with lower case letters converted to upper case and vice versa. </swapcase><translate>Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed. </translate><upper>Return a copy of s, but with lower case letters converted to upper case. </upper><ljust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </ljust><rjust>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </rjust><center>These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated. </center><zfill>Pad a numeric string s on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly. </zfill><replace>Return a copy of string s with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. </replace></string></pythondoc>